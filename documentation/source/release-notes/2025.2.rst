*******************************
Open Dylan 2025.2 (coming soon)
*******************************

This document describes the 2025.2 release of Open Dylan, released DD
MMM, 2025.  The highlights of the release are listed below.  For complete
details see the `commit logs
<https://github.com/dylan-lang/opendylan/compare/v2024.1.0...v2025.1.0>`_ for
this release.

.. note:: Some commit logs, for example for testworks and other libraries that
          are included in Open Dylan as git submodules, may be in other
          repositories.

* Download the release: https://opendylan.org/download
* Read documentation: https://opendylan.org
* Report problems: https://github.com/dylan-lang/opendylan/issues


Compiler
========

* The compiler no longer copies C/C++ source files, C/C++ header
  files, C object files, Windows resource files, and Jam include files
  into the build directory before performing the link build stage, and
  instead makes the original source directory location available to
  the build system (and the Jam build scripts).

* The compiler now signals an error when it is not able to inline a
  call to a method that has either a method parameter or a return
  value with a raw type. This provides explicit guidance when
  encountering the situation outlined in `Issue 1377
  <https://github.com/dylan-lang/opendylan/issues/1377>`_.

* Repeated optimization involving lifting closures to top level now
  properly preserves types of local bindings.

* Optimization of the type estimation of :drm:`if` expressions can now
  be repeated multiple times as the function is iteratively improved.

* The compiler now supports an extended version of
  ``copy-down-method-definer`` allowing a ``specializing`` clause
  selecting which of the more-general methods should be selected for
  inlining in the case of dispatch ambiguity. Additionally, ambiguous
  ``copy-down-method`` definitions are now signaled as serious
  warnings rather than allowing a random applicable method to be
  chosen for inlining.

* The overhead for critical runtime code used for type checking and
  method dispatch has been reduced by ensuring that certain object
  slots could never be considered uninitialized.

Tools
=====

Library Updates
===============

Dylan
-----

* A number of ``copy-down-method`` definitions in the :lib:`dylan`
  library that were previously marked as ambiguous have been
  corrected.

Common-Dylan
------------

* A problem with retrieving :func:`application-name` and
  :func:`application-arguments` results from the operating system when
  running Dylan applications under tools such as :program:`valgrind` has
  been fixed.

io
---

* Specific versions of the stream functions sealed on
  ``<byte-char-file-stream>`` and ``<byte-file-stream>`` are provided,
  significantly improving the performance of these stream operations.


Contributors
============
