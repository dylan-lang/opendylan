*******************************
Open Dylan 2012.1 Release Notes
*******************************


Introduction
============

.. TODO: fix release date

This document describes the 2012.1 release of Open Dylan, released
March 7, 2012.

    * `Download the release <http://opendylan.org/download/index.html>`_
    * `Report bugs <https://github.com/dylan-lang/opendylan/issues>`_
    * `Source code <https://github.com/dylan-lang/opendylan/tree/v2012.1>`_

What's New?
===========

Documentation Improvements
--------------------------

* All documentation has been converted to the Sphinx document
  generator.  This is a huge improvement in our ability to keep the
  documentation up-to-date, modernizes its look and feel, and allows
  us to generate various output formats.

* The core libraries documentation has been unified into one `Dylan
  Library Reference
  <http://opendylan.org/documentation/library-reference/index.html>`_
  document.

* The documentation on using the Open Dylan Console Environment has
  been rewritten and expanded.  A new section on the Dylan Interaction
  Mode for Emacs (DIME) has been added.  See both in `the Getting
  Started Guide
  <http://opendylan.org/documentation/getting-started/index.html>`_.


Build Process
-------------

To simplify the build process, two changes were made to
``dylan-compiler``:

(1) Build products are now stored in ``./_build`` on non-Windows
    platforms instead of in ``~/Open-Dylan``.  This may still be
    overridden via the ``OPEN_DYLAN_USER_ROOT`` environment variable
    if you prefer to re-use the same build products across multiple
    different projects, but we don't recommend it.

(2) If the directory ``./registry`` exists, the compiler will add it
    to the beginning of the ``OPEN_DYLAN_USER_REGISTRIES`` environment
    variable so that those registry entries take precedence over
    others.

The intention is that for projects that use several other projects one
can now use git submodules and a project "registry" directory to make
the following work::

   $ git clone --recursive <url>
   $ cd <project-directory>
   $ dylan-compiler -build <project-name>

In the past it would be necessary to set various environment variables
and clone the central "registry" repository.  A minor side-effect of
this change is that if you work on several distinct projects you will
initially have to build all dependencies, down to and including the
``dylan`` library.


C3 Superclass Linearization
---------------------------

Open Dylan now uses the C3 superclass linearization algorithm.  This
algorithm was originally designed for Dylan but for historical reasons
was never implemented in Dylan, until now.  In most cases this change
should not change the semantics of existing programs, but if it does
the compiler will issue a serious warning.  In a future release this
will be changed to non-serious warning, and then eventually the
warning will be removed completely.

.. TODO: add example of the warning?

See `DEP-0003 <http://opendylan.org/proposals/dep-0003.html>`_ for
more details.


Multi-threading for the C Back-end
----------------------------------

The C back-end now fully supports multi-threading.  Several bugs
unrelated to threading were also fixed in this work, which should
improve the stability of the C back-end in general.

.. TODO: moar details


Limited Collections
-------------------

There were some bugs and some missed opportunities for optimization in
the limited collections code.


Consider the following constant:

.. code-block:: dylan

    define constant <float-vec> = limited(<vector>, of: <single-float>, size: 3);


The subtype relation was broken when the ``size:`` keyword is present:

.. code-block:: dylan

    let v = make(<float-vec>, fill: 0.0);
    instance?(v, <float-vec>);  // returns #f

This required fixing of ``instance?`` both in dfmc/modeling/types and
dylan/type.


Another issue with the same code was that the ``size`` method was not constant-folded at compile-time:

.. code-block:: dylan

    foo[1] := sin(foo[0]);

This line of code lead to the following intermediate (DFM) code, which
includes range checks (for both index 0 and 1):

.. code-block:: dylan

    t32 := SLOT-VALUE-INITD({{ foo }}, size)
    t39 := [PRIMOP cast-integer-as-raw(t32)]
    t44 := [PRIMOP machine-word-unsigned-less-than?(^%1, t39)]
    IF (t44)
      t51 := REPEATED-SLOT-VALUE({{ foo }}, single-float-vector-element, ^%1)
    ELSE
      *t28(1) := [CALLi ^{<&method> element-range-error (<collection>, <object>)}({{ foo }}, ^0)]
      t71 := *t28(1) [0]
      t70 := [PRIMOP single-float-as-raw(t71)]
    END IF
    t74 := [IF-MERGE t51 t70]
    t67 := [PRIMOP single-float-sin(t74)]
    t68 := [PRIMOP raw-as-single-float(t67)]
    t85 := [PRIMOP machine-word-unsigned-less-than?(^%5, t39)]
    IF (t85)
      REPEATED-SLOT-VALUE({{ foo }}, single-float-vector-element, ^%5) := t67
    ELSE
      [CALLi ^{<&method> element-range-error (<collection>, <object>)}({{ foo }}, ^1)]
    END IF
    [IF-MERGE #f #f]

The same Dylan code is now translated into the following DFM code:

.. code-block:: dylan

    t19 := REPEATED-SLOT-VALUE({{ foo }}, single-float-vector-element, ^%1)
    t20 := [PRIMOP single-float-sin(t19)]
    t21 := [PRIMOP raw-as-single-float(t20)]
    REPEATED-SLOT-VALUE({{ foo }}, single-float-vector-element, ^%5) := t20

This required fixes in the modeling, typist and optimization parts of
the compiler.


A third issue was that the type inference always used the inferred
type of the actual instance. This failed for primitive types,
``<single-float>`` was used instead of ``<raw-single-float>``. This
lead towards code which the C compiler could not compile
(``incompatible code in assignment``):

.. code-block:: dylan

    a[0] := - a[0];

This required a fix in the typist.


Other Changes
-------------

.. TODO: elevate more of these to their own section.

In reverse chronological order

* generate jam files with correct gc environment given by configure baragent Feb 17, 2012 4538278dda9e8767a620e345c1f7f8da2c801f19
* fix control flow graph if unwind-protect without body is optimized hannes Feb 16, 2012 e946c88a18fcc20191f9b6b30a463c85617842ba issue #182
* extend library-report to output rst documentation abeaumont, waywardmonkeys Feb 2012
* fix split when remove-with-empty? is true abeaumont Feb 07, 2012 1c3512d571ba25fb7bfd101585db5afcf3315353
* initial man pages for dylan-compiler and make-dylan-app waywardmonkeys Feb 04, 2012 9a9b2847f212bd866c9d623f603dfc2dd01a25a8
* reimplement make-dylan-app in Dylan glidesurfer Feb 01, 2012 pull request #172

* fix limited type handling hannes Jan 25, 2012 pull request #158 issue #177, issue #122, issue #82
* cleanup release-info library hannes Jan 18, 2012 pull request #162
* expand pathnames in interactive console compiler hannes Jan 11, 2012 ba5e5c97fad5e1f2758e262d28441a2faa5ecc93 issue #149
* added dependency report waywardmonkeys Jan 07, 2012 45e1267e014db3762e579e1fefca4f9850df3337

* fix bug-report to support all current operating system values and work in HTML mode waywardmonkeys Dec 29, 2011 8adda595df1444e4d232a0b5cef859dae03c562b 0930789132f2af3954942eee8fa8bb681d371821
* various fixes to project commands and properties waywardmonkeys Dec 28, 2011 394074426db442e2d859a5fce56b58da95fc297d
* fix shared library initialization in C back-end waywardmonkeys Dec 28, 2011 b8591d14a4a24656599f1c0a8364d9de621a8f72
* implement load-library via dlopen Dec waywardmonkeys 27, 2011 ff523f27d81189da1a07e379bd74f159dd0389a1
* abort when applying too many arguments in C run-time housel Dec 20, 2011 e7ceda33f00e460a693c7ccd81f484ae40b13586
* remove libtool, since it wasn't used waywardmonkeys Dec 20, 2011 4a983d5028b77b1c2c6698c2379759e08d2470b0
* fix internal error when macroexpand is called with no open project hannes Dec 19, 2011 b4fd09dc6314d57b256dc76d3c06eef769e746f8 issue #77
* remove unused functional-objects-extras module hannes Dec 18, 2011 2e7f2a4cb38f278495b48f7883360ddd349f2b9f issue #90
* Fix a compilation crash with C backend when trying to emit an overflown integer abeaumont Dec 18, 2011 819b99bfe14656f5b5081bd70287d8d9f7fb7c7f
* reduce debug output of compiler (by making it optional with debug-out) hannes Dec 15, 2011 d093ae6cdfd5f4b8dd8ff3ac6359e8f6d9a8f847 issue #92
* extended floating-point support housel core-library Dec 14, 2011 b2762c85f554b0ad99efe800259c709e918ce460 bug 7122
* remove MacOS locators hannes core-library Dec 13, 2011 beeb8635eac918685f3cfff08eb38c5428fb1ac4
* unification of code in common-dylan on UNIX (command line argument parsing etc) hannes core-library Dec 11, 2011 060f69f44a990adeea0f1db34677f6091fd61dfa
