prefix		= @prefix@
ifneq ($(DESTDIR),)
prefix := $(DESTDIR)$(prefix)
endif
srcdir		= @abs_srcdir@
abs_srcdir	= @abs_srcdir@
abs_builddir	= @abs_builddir@

fd_build	= @fd_build@
fd_host		= @fd_host@
fd_target	= @fd_target@

rt_build	= @rt_build@
rt_host		= @rt_host@
rt_target	= @rt_target@

arch_flag	= @arch_flag@

fdmake		= @PERL@ $(srcdir)/admin/builds/fdmake.pl

DYLANCOMPILER	= @DYLANCOMPILER@

library_srcdir	= @with_library_source@

LIBRARY_PACKS	= @LIBRARY_PACKS@

.PHONY: 1-stage-bootstrap 1-stage-bootstrap-reentry \
	2-stage-bootstrap 2-stage-bootstrap-reentry \
	3-stage-bootstrap 3-stage-bootstrap-reentry \
	bootstrap-stage-1 bootstrap-stage-2 bootstrap-stage-3 \
	all install install-stage uninstall clean check

all:	@bootstrap_target@

###
# 3-stage bootstrap includes stages 1 and 2 and 3: it rebuilds the compiler
# and libraries, then rebuilds them again to take advantage of new
# optimizations. The 3-stage bootstrap is useful to build Open Dylan locally
# without installing it; if you want to install it, do a 2-stage bootstrap and
# run make install (which effectively does the third stage).

3-stage-bootstrap:
	$(MAKE) 3-stage-bootstrap-reentry \
	  BOOTSTRAP_2_COMPILER="$(abs_builddir)/Bootstrap.1/bin/dylan-compiler $(arch_flag) -build"
3-stage-bootstrap-reentry: bootstrap-stage-1 bootstrap-stage-2 bootstrap-stage-3

###
# 2-stage bootstrap includes both stages 1 and 2: it rebuilds the compiler to
# support new primitives and rebuilds the libraries using that compiler.

2-stage-bootstrap:
	$(MAKE) 2-stage-bootstrap-reentry \
	  BOOTSTRAP_2_COMPILER="$(abs_builddir)/Bootstrap.1/bin/dylan-compiler $(arch_flag) -build"
2-stage-bootstrap-reentry: bootstrap-stage-1 bootstrap-stage-2

###
# 1-stage bootstrap includes only stage 2: it rebuilds compiler and libraries
# when the existing compiler and libraries will understand the primitives.

1-stage-bootstrap:
	$(MAKE) 1-stage-bootstrap-reentry \
	  BOOTSTRAP_2_COMPILER="$(DYLANCOMPILER)"
1-stage-bootstrap-reentry: bootstrap-stage-2

###
# Stage 1 builds a compiler that can understand new primitives used in the
# BOOTSTRAP_1_PRIMITIVE_LIBS libraries. An existing compiler won't understand
# the new stuff, so until a new compiler is built, existing libs are used
# instead. Note that the stage 1 dylan-compiler loads a mix of existing and
# stage 1 libraries.

BOOTSTRAP_1_PRIMITIVE_LIBS = \
	dylan functional-extensions machine-word byte-vector \
	threads transcendentals functional-dylan \
	common-extensions common-dylan unix-portability \
	c-ffi bit-vector bit-set collectors plists set \
	table-extensions collections streams standard-io \
	print format format-out io date file-system \
	operating-system locators settings system \
	generic-arithmetic big-integers duim-utilities \
	duim-geometry duim-dcs duim-sheets duim-graphics \
	duim-layouts duim-gadgets duim-frames duim-core \
	duim-extended-geometry duim-gadget-panes duim \
	winsock2 sockets network midi \
	deuce duim-deuce com ole ole-server sql odbc-ffi \
	sql-odbc corba-dylan corba-protocol dylan-orb \
	iop-protocol ir-protocol ir-stubs orb-connections \
	orb-core orb-iiop orb-ir orb-poa orb-streams \
	orb-utilities portableserver-protocol \
	naming-protocol naming-stubs naming-client

BOOTSTRAP_1_REGISTRY = $(abs_srcdir)/sources/bootstrap1-registry

BOOTSTRAP_1_ENV = \
	OPEN_DYLAN_PLATFORM_NAME=$(fd_build) \
	OPEN_DYLAN_BUILD_LOGS=$(abs_builddir)/Bootstrap.1/build/logs \
	OPEN_DYLAN_USER_ROOT=$(abs_builddir)/Bootstrap.1 \
	OPEN_DYLAN_USER_INSTALL=$(abs_builddir)/Bootstrap.1 \
	OPEN_DYLAN_USER_BUILD=$(abs_builddir)/Bootstrap.1/build \
	OPEN_DYLAN_USER_REGISTRIES=$(BOOTSTRAP_1_REGISTRY):$(library_srcdir)/registry \
	OPEN_DYLAN_USER_SOURCES=$(abs_srcdir)/sources

$(abs_builddir)/Bootstrap.1:
	mkdir $(abs_builddir)/Bootstrap.1
	mkdir $(abs_builddir)/Bootstrap.1/bin
	mkdir $(abs_builddir)/Bootstrap.1/lib
	mkdir $(abs_builddir)/Bootstrap.1/lib/runtime
	mkdir $(abs_builddir)/Bootstrap.1/build 
	mkdir $(abs_builddir)/Bootstrap.1/build/logs
	cp $(srcdir)/$(rt_build)/$(fd_build)-build.jam \
	   Bootstrap.1/lib/$(fd_build)-build.jam

$(BOOTSTRAP_1_REGISTRY):
	mkdir $(BOOTSTRAP_1_REGISTRY)
	cp -r $(srcdir)/sources/registry/generic $(BOOTSTRAP_1_REGISTRY)
	cp -r $(srcdir)/sources/registry/$(fd_build) $(BOOTSTRAP_1_REGISTRY)
	for lib in $(BOOTSTRAP_1_PRIMITIVE_LIBS); do \
	  rm -f $(BOOTSTRAP_1_REGISTRY)/generic/$$lib; \
	  rm -f $(BOOTSTRAP_1_REGISTRY)/$(fd_build)/$$lib; \
	done

$(abs_builddir)/Bootstrap.1/bin/dylan-compiler:
	@echo Building Open Dylan bootstrap stage 1...
	@OPEN_DYLAN_USER_INSTALL=$(abs_builddir)/Bootstrap.1 \
	  $(MAKE) -C $(rt_build) clean install
	@$(BOOTSTRAP_1_ENV) \
	  $(fdmake) --compiler="$(DYLANCOMPILER)" dylan-compiler

bootstrap-stage-1: \
		$(abs_builddir)/Bootstrap.1 \
		$(BOOTSTRAP_1_REGISTRY) \
		$(abs_builddir)/Bootstrap.1/bin/dylan-compiler

###
# Stage 2 bootstrap builds altered libraries and compiler and does not link to
# any existing or stage 1 libraries.

BOOTSTRAP_2_ENV = \
	OPEN_DYLAN_PLATFORM_NAME=$(fd_build) \
	OPEN_DYLAN_BUILD_LOGS=$(abs_builddir)/Bootstrap.2/build/logs \
	OPEN_DYLAN_USER_ROOT=$(abs_builddir)/Bootstrap.2 \
	OPEN_DYLAN_USER_INSTALL=$(abs_builddir)/Bootstrap.2 \
	OPEN_DYLAN_USER_BUILD=$(abs_builddir)/Bootstrap.2/build \
	OPEN_DYLAN_USER_REGISTRIES=$(abs_srcdir)/sources/registry:$(library_srcdir)/registry \
	OPEN_DYLAN_USER_SOURCES=$(abs_srcdir)/sources

BOOTSTRAP_2_UNSET_ENV = \
	OPEN_DYLAN_RELEASE_ROOT \
	OPEN_DYLAN_RELEASE_INSTALL \
	OPEN_DYLAN_RELEASE_BUILD \
	OPEN_DYLAN_RELEASE_REGISTRIES \
	OPEN_DYLAN_RELEASE_SOURCES

$(abs_builddir)/Bootstrap.2:
	mkdir $(abs_builddir)/Bootstrap.2
	mkdir $(abs_builddir)/Bootstrap.2/bin
	mkdir $(abs_builddir)/Bootstrap.2/lib
	mkdir $(abs_builddir)/Bootstrap.2/lib/runtime
	mkdir $(abs_builddir)/Bootstrap.2/build 
	mkdir $(abs_builddir)/Bootstrap.2/build/logs

$(abs_builddir)/Bootstrap.2/bin/dylan-compiler:
	@echo Building Open Dylan bootstrap stage 2...
	@unset $(BOOTSTRAP_2_UNSET_ENV) ; \
	  OPEN_DYLAN_USER_INSTALL=$(abs_builddir)/Bootstrap.2 \
	  $(MAKE) -C $(rt_build) clean install
	@unset $(BOOTSTRAP_2_UNSET_ENV) ; \
	  $(BOOTSTRAP_2_ENV) \
	  $(fdmake) --compiler="$(BOOTSTRAP_2_COMPILER)" dylan-compiler

bootstrap-stage-2: \
		$(abs_builddir)/Bootstrap.2 \
		$(abs_builddir)/Bootstrap.2/bin/dylan-compiler

###
# Stage 3 builds libraries and compiler using stage 2 products, taking
# advantage of any new optimizations etc. in this release. It basically builds
# an installation without actually installing it.

BOOTSTRAP_3_ENV = \
	OPEN_DYLAN_PLATFORM_NAME=$(fd_build) \
	OPEN_DYLAN_RELEASE_ROOT=$(abs_builddir)/Bootstrap.2 \
	OPEN_DYLAN_RELEASE_INSTALL=$(abs_builddir)/Bootstrap.2 \
	OPEN_DYLAN_RELEASE_BUILD=$(abs_builddir)/Bootstrap.2/build \
	OPEN_DYLAN_RELEASE_REGISTRIES=$(abs_srcdir)/sources/registry:$(library_srcdir)/registry \
	OPEN_DYLAN_RELEASE_SOURCES=$(abs_srcdir)/sources \
	OPEN_DYLAN_BUILD_LOGS=$(abs_builddir)/Bootstrap.3/build/logs \
	OPEN_DYLAN_USER_ROOT=$(abs_builddir)/Bootstrap.3 \
	OPEN_DYLAN_USER_INSTALL=$(abs_builddir)/Bootstrap.3 \
	OPEN_DYLAN_USER_BUILD=$(abs_builddir)/Bootstrap.3/build \
	OPEN_DYLAN_USER_REGISTRIES=$(abs_srcdir)/sources/registry:$(library_srcdir)/registry \
	OPEN_DYLAN_USER_SOURCES=$(abs_srcdir)/sources

BOOTSTRAP_3_LIBRARIES = dylan-compiler

BOOTSTRAP_3_LIBRARY_PACKS = @LIBRARY_PACKS@

BOOTSTRAP_3_COMPILER = \
	$(abs_builddir)/Bootstrap.2/bin/dylan-compiler $(arch_flag) -build

$(abs_builddir)/Bootstrap.3:
	mkdir $(abs_builddir)/Bootstrap.3
	mkdir $(abs_builddir)/Bootstrap.3/bin
	mkdir $(abs_builddir)/Bootstrap.3/lib
	mkdir $(abs_builddir)/Bootstrap.3/lib/runtime
	mkdir $(abs_builddir)/Bootstrap.3/build
	mkdir $(abs_builddir)/Bootstrap.3/build/logs
	@echo Copying sources...
	cp -R $(abs_srcdir)/sources $(abs_builddir)/Bootstrap.3
	@echo Removing unnecessary directories...
	find $(abs_builddir)/Bootstrap.3/sources -depth -name '.*' -exec rm -rf {} \;
	-rm -r $(abs_builddir)/Bootstrap.3/sources/bootstrap1-registry

bootstrap-stage-3: $(abs_builddir)/Bootstrap.3
	@echo Building Open Dylan bootstrap stage 3...
	@OPEN_DYLAN_USER_INSTALL=$(abs_builddir)/Bootstrap.3 \
	  $(MAKE) -C $(rt_build) clean install
	@$(BOOTSTRAP_3_ENV) \
	  $(fdmake) --compiler="$(BOOTSTRAP_3_COMPILER)" \
	  $(BOOTSTRAP_3_LIBRARIES) --library-packs="$(BOOTSTRAP_3_LIBRARY_PACKS)"

###
# Install stage is like stage 3, but it builds libraries and compiler in their
# installed locations.

INSTALL_ENV = \
	OPEN_DYLAN_PLATFORM_NAME=$(fd_build) \
	OPEN_DYLAN_RELEASE_ROOT=$(abs_builddir)/Bootstrap.2 \
	OPEN_DYLAN_RELEASE_INSTALL=$(abs_builddir)/Bootstrap.2 \
	OPEN_DYLAN_RELEASE_BUILD=$(abs_builddir)/Bootstrap.2/build \
	OPEN_DYLAN_RELEASE_REGISTRIES=$(abs_srcdir)/sources/registry:$(library_srcdir)/registry \
	OPEN_DYLAN_RELEASE_SOURCES=$(abs_srcdir)/sources \
	OPEN_DYLAN_BUILD_LOGS=$(prefix)/build/logs \
	OPEN_DYLAN_USER=$(prefix) \
	OPEN_DYLAN_USER_ROOT=$(prefix) \
	OPEN_DYLAN_USER_INSTALL=$(prefix) \
	OPEN_DYLAN_USER_BUILD=$(prefix)/build \
	OPEN_DYLAN_USER_REGISTRIES=$(prefix)/sources/registry:$(library_srcdir)/registry \
	OPEN_DYLAN_USER_SOURCES=$(prefix)/sources

INSTALL_LIBRARIES = dylan-compiler dswank

INSTALL_LIBRARY_PACKS = @LIBRARY_PACKS@

INSTALL_COMPILER = \
	$(abs_builddir)/Bootstrap.2/bin/dylan-compiler -build


$(prefix)/sources:
	install -d $(prefix)
	@echo Copying sources...
	cp -R $(abs_srcdir)/sources $(prefix)
	@echo Removing unnecessary directories...
	find $(prefix)/sources -depth -name '.*' -exec rm -rf {} \;
	-rm -r $(prefix)/sources/bootstrap1-registry

install-stage: $(prefix)/sources
	install -d $(prefix)/bin $(prefix)/lib $(prefix)/lib/runtime $(prefix)/build $(prefix)/build/logs
	@echo Building Open Dylan installation...
	OPEN_DYLAN_USER_INSTALL=$(prefix) \
	  $(MAKE) -C $(rt_build) clean install
	@$(INSTALL_ENV) \
	  $(fdmake) --compiler="$(INSTALL_COMPILER)" \
	  $(INSTALL_LIBRARIES) --library-packs="$(INSTALL_LIBRARY_PACKS)"

install: @bootstrap_target@ install-stage

###
# Maintenance and test targets

# The only safe directory to delete is $(prefix)/sources. $(prefix)/bin and the
# others may have user content if $(prefix) is /usr or /usr/local.
uninstall:
	rm -rf $(prefix)/sources

install-strip:

clean:
	rm -rf $(abs_builddir)/Bootstrap.1
	rm -rf $(abs_builddir)/Bootstrap.2
	rm -rf $(abs_builddir)/Bootstrap.3
	rm -rf $(BOOTSTRAP_1_REGISTRY)
	$(MAKE) -C $(rt_build) clean

distclean: clean
	-rm -f aclocal.m4
	-rm -f configure
	-rm -f config.log
	-rm -f config.status
	-rm -f config.status.lineno
	-rm -f libtool
	-rm -f Makefile sources/lib/run-time/pentium-linux/Makefile sources/lib/run-time/pentium-freebsd/Makefile sources/dfmc/c-run-time/Makefile
	-rm -rf build-aux
	-rm -rf autom4te.cache

mostlyclean:

maintainer-clean:

TAGS:

dist:

CHECK_STAGE = 3
CHECK_COMPILER_STAGE = $(CHECK_STAGE)

CHECK_APPS = \
	libraries-test-suite-app \
	c-ffi-test-suite-app \
	duim-test-suite-app \
	deuce-test-suite-app \
	jam-test-suite-app \
	channels-tests

CHECK_ENV = \
	OPEN_DYLAN_PLATFORM_NAME=$(fd_build) \
	OPEN_DYLAN_RELEASE_ROOT=$(abs_builddir)/Bootstrap.$(CHECK_STAGE) \
	OPEN_DYLAN_RELEASE_INSTALL=$(abs_builddir)/Bootstrap.$(CHECK_STAGE) \
	OPEN_DYLAN_RELEASE_BUILD=$(abs_builddir)/Bootstrap.$(CHECK_STAGE)/build \
	OPEN_DYLAN_RELEASE_REGISTRIES=$(abs_srcdir)/sources/registry:$(library_srcdir)/registry \
	OPEN_DYLAN_RELEASE_SOURCES=$(abs_srcdir)/sources \
	OPEN_DYLAN_BUILD_LOGS=$(abs_builddir)/Bootstrap.$(CHECK_STAGE)/build/logs \
	OPEN_DYLAN_USER_ROOT=$(abs_builddir)/Bootstrap.$(CHECK_STAGE) \
	OPEN_DYLAN_USER_INSTALL=$(abs_builddir)/Bootstrap.$(CHECK_STAGE) \
	OPEN_DYLAN_USER_BUILD=$(abs_builddir)/Bootstrap.$(CHECK_STAGE)/build \
	OPEN_DYLAN_USER_REGISTRIES=$(abs_srcdir)/sources/registry:$(library_srcdir)/registry \
	OPEN_DYLAN_USER_SOURCES=$(abs_srcdir)/sources

check:	bootstrap-stage-$(CHECK_COMPILER_STAGE)
	@$(CHECK_ENV) \
	  $(fdmake) \
	  --compiler="$(abs_builddir)/Bootstrap.$(CHECK_COMPILER_STAGE)/bin/dylan-compiler -build -save" \
	  $(CHECK_APPS) && \
	  for app in $(CHECK_APPS); do \
	    $(abs_builddir)/Bootstrap.$(CHECK_STAGE)/bin/$$app; \
	  done

installcheck:

installdirs:

Makefile:  $(srcdir)/Makefile.in  config.status
	CONFIG_HEADERS= CONFIG_LINKS= \
	  CONFIG_FILES=./$@ $(SHELL) ./config.status
